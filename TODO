TODO
====

- Fast forward actions that aren't visible.
- Refactor gamemode out:
  - Rendering separate
  - Core state machine
    - Start screen
    - Game
    - Game Over
  - Controls
    - Allow for WASDQEZC, vi and numpad.
    - Debug keymode.
    - Mouse, both desktop (absolute pointer) and laptop versions (relative motion swipes).
- Actor refactor
  - Visuals refactored into Sprites
  - May need more than one actor per vertex, e.g. ghosts. May be able to special case those though.
  - Blackboard for AI related state.
- Move Level graph function into a Graph2d utility library, they'd be useful for room and level gen.
- Stop reaching into Level's innards all over the place, especially for vertex and graph info.
- Need an object (maybe Level) that hold the actors, level, scheduler and so on.
  - Needs to be able to spawn actors with.
  - Need to be able to change time (for slow mo' on death).
  - Need to be able to interrogate the graph.
- Explanatory text for monsters.
  - Maybe with unique names and flavour lines.

- The scheduler is a nice idea but the code is too complex.
  - Binary heap isn't stable by default but could be a good idea.
    - Problem is that you need a for ever increasing timer.

- Voronoi
  - Polygon offset algorithm for shorelines, roofs and so on.
    - Currently using a voronoi based hack for per cell offsetting.
      - For each cell move in the neighbouring sites by twice the offset.
      - Then recalc voronoi and the halfedges for the cell are the offset edges.
  - Edge fettling for cells, e.g. grass.
  - Reconsider level generation in light of using voronoi.
    - Create room AABBs layout gen style.
    - Change roomgen to create points and not graphs.
    - Voronoi
    - Connect rooms
    
  - Either try and maintain max vertex valance of 8 (so keys work) or move to mouse only input.
    - Only a few cells seem to have too may neighbours.
    - Not checked for edges being too close, e.g. having two edges that are west.
  - Maybe try to compile Love by hand to get Geometry support.
  - Need to be able to traverse the halfedges and find out connected cells.

  - Lakes (water, lava, abyss, acid, ...)
    - Brogue method would be hard to translate:
      - Create CA based lake.
      - Try five times and place into world.
        - If connectivity breaks reject.
    - We only have connectivity after the voronoi step.
      - Could use lake as a mask and turn already created voronoi cells into
        fluid then check connectivity though.
        - Will look weird to have square and hexagonal water spaces though.

- Need to move rendering code into it's own file.
- Need to add filters to dmap.
  - Need to demeter up Level, there's too much reaching into internals.

- Need some basic menu support for debugging flags, resolution changing and
  probably some game uses.

- Need to define cell/vertex structure:
  - Currently commented at the top of Level.lua

- Need to define terrain types.
  - Name
  - Passable
  - BG colour
  - FG colour
  - drawCore flag
- Need diagonal terrain matrix for how to handle edges between the cells.
  - For example hard edges (thick black lines say) should only be between certain cell types.
  - Also if I ever perturb the edges what happens depends on the abutting cell types.




- Need neighbour blocking on graph grammars.
- Need cosmetic edges.
- May need to be able to set some edge properties, e.g. long path.
- Need more than one rule set.
- Need to complete the loop and have the graph grammar output into the voronoi.
- The pattern and substitute graphs are stored with screen based coords might
  be worth 'normalising' them to a some specific bounds.
- Also might be worth running a force draw on the pattern and subsititute.

