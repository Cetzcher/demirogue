Layout
------

So I have a basic graph grammar and force based graph drawing level gen system.

The limits on the graph grammar rules are:
- Only start rules can have one vertex in the pattern, which must be tagged 's'.
- No 's' tagged vertices can appear in substitute graphs.
- All non-start rules must be context-senstive, i.e. have more than one vertex
- All pattern and substitute graphs must be connected.
- There must be a bijective map from pattern vertices to susbstitute vertices.
  - So the number of substitute vertices is >= the number of pattern vertices.
- Pattern vertices (but not substitute or host vertices) have a tag set, so
  they can match more than one different host graph tag.
- The value part of the tag set can either be true or false. True denotes what
  host graph vertex tags can be matched. False denotes that any host vertices
  attached via unmapped (edges not in the pattern) host edges should not have
  the tag.
- There is a maxValence parameter that stops rules from exceeding it. However
  if a substitute graph has a greater valence it can still be used.
- If a pattern vertex is tagged as '-' it is a wildcard that allows it to match
  any host vertex.
- If a substitute vertex is tagged as '-' (only allowed on mapped vertices) it
  means it uses the tag from the host graph.
- Vertices and edges can be marked as 'cosmetic'. This means they aren't
  intended to become actual rooms or corridors but are present purely for
  aestetic reasons.
  - Cosmetic edges are allowed to intersect in a final graph.
  - Cosmetic edges cannot match non-cosmetic edges and vice versa.
- There are currently four parameters that control the graph building process:
  
  maxIterations: to cap the number of rule applications.
  minVerticex:   if the building process finishes or stalls with fewer than
                 this many vertices the process is considered 'failed'.
  maxVertices:   this is very exceeded for any reason, i.e. rules aren't even
                 applied if it would create enbough vertices to exceed it.
  maxValence:    rules are not allowed to be applied if this value would be
                 exceeded for any vertex.
  TODO: metarules


Some points on the algorithm used:
----------------------------------

- The subgraph matches have to be whittled down to avoid a problem with
  'flipped' patterns. For example consider a triangle pattern graph:

  a - b
    \ |
      b

  There are two ways this can be mapped to a host graph. One of the matches is
  a 'rotation' the other is a 'flipped' rotation because the b tagged vertices
  can be mapped in either order. I use the signed angle between edges to
  eliminate the flipped matches (graph.spurs() calculates them). Flipped
  matches cause a problem because when the neighbourhood edges are
  re-established they will intersect the subsitute and the graph drawing cannot
  fix the issue reliably.

- The substitute vertices that are mapped to pattern vertices take the
  positions of the host graph vertices. The 'fresh' vertices introduced in a
  substitute graph are created relative to an edge in the pattern graph. This
  is essentially a 'rotation and scale'. This is why non-start rules must be
  context sensitive, to allow an edge to be used as a basis.

- The current editor forces the positions of mapped subsitute vertices to be
  similar to their pattern vertices. This isn't checked in the rules but is
  implcitly assumed by the flip detection logic.

- The force based graph drawing is the slowest part of the process by a very
  large margin. Not sure how much scope there is for optimising it either.

  May be able to use more aggressive paramters (higher maxDelta) if the
  upscaling insertion mentioned below is implemented.

  NOTE: While it is still the slowest part if you run it as fast as possible
        (no yielding) it is actually very fast unless you have a large number
        of vertices (30+).

- It's easy to cause issues by connecting edges in the substitute graph that
  aren't connected in the pattern, e.g.

  a - b     a - b
      |  =>   \ |
      c         c

  It can easily create 'knots' that the graph drawing can't undo. Might be
  worth stopping this from happening by adding another condition on the rules.

  Actually this is sometimes very useful, so caveat emptor.

- The outcome of the following discussion has been implemented. I'm keeping
  the discussion to show the thought process that wento into the negated tag
  feature.

  It's too easy to create 'tassles', e.g.

  a - b     a - b
    \ |  =>   \ |
      b         b - c

  The above can be matched to the same part of the host graph many times so you
  can get a lot of 'c' vertices hanging off the same 'b' vertex. Could be fixed
  by changing the tag of the 'b' vertex that 'c' is attched to though.

  This issue also made me consider a rule that any vertex that changes valence
  in the substitute must have the same valence in the host graph as it does in
  the pattern. This would stop tassles but also make obviously fine rules not
  work as intended, e.g.

               b
              / \
  a - a  =>  a   a
              \ /
               b

  The 'a' vertices increase in valence but so this rule could only be applied
  to a host graph that looked exactly like the pattern graph.

  Could add the valence rule as a optional vertex attribute though. In fact I
  think this might be the best solution...

  Actually this isn't a great solution. You need to add a lot of extra guff to
  the pattern graph to make it work, which reduces flexibility.

  A better solution might be something I've seen in a few graph grammar systems
  where you can specify vertices that shouldn't be in the host, e.g.

  a - b         a - b
    \ |      =>   \ |
      b - !c        b - c

  The !c means don't match if there's a c tagged vertex connected to the lower
  'b' vertex. This will be tricky to implement though:

  Having explcit 'negated' vertices causes quite a few issues in the graph
  editor. So instead I opted for allowing both positive and negative tags.

  Normal tags are positive. A negated tag is interpreted as:

  'Any vertices connected to the pattern vertex by unmapped edges in the host
  graph must not have the negated tag.'

  So the above example becomes:

  a - b         a - b
    \ |      =>   \ |
     b,!c           b - c

  The 'b,!c' is one positive 'b' tag and one negative 'c' tag.

- The following has been implemented, keeping dicussion for pedagogical
  reason.

  Sometimes the valence of vertices gets too high for the graph drawing to
  handle, e.g.

  a - b     a - b
    \ |  => | \ |
      b     b - b

  Can subdivide add an extra spoke to a 'wheel' of triangles indeifnitely.
  Eventually the circumference of the wheel will collapse and edges start
  intersecting. May be worth adding a maxValence paramter to the builder so
  that this isn't allowed to happen. In any case we don't want the valence to
  get too high for gameplay reasons anyway.

  Could be a per-vertex attribute I suppose but feels a little untidy.

  Also I think the cause of the issue is that the spring forces in the graph
  drawing are very strong when the edge is too short. This pushes other edges
  into overlapping positions.

- After a graph has been successfully generated each vertex the graph is put
  through a 'relax' phase.

  - Each vertex has a room created for it based on theme paramters.
  - Each room has a bounding circle calculated for it.
  - The vertices are then scaled out so that none of the circles overlap.
  - The graph is then but through a final force draw step (with paramters
    defined in the theme) to bring the rooms closer together.

Ideas at various stages of implementation
-----------------------------------------


- What about setting edge length factors at the end of each force draw?

  This is a pretty random idea, not sure what the purpose was...

- There is an issue with subdividing rules. Because the desired edge length for
  all edges is the same it is common for the 'inside' vertices of a subdivding
  substitute graph to be pushed outside.

  It would be possible to control this with a per-edge 'length factor' that
  multiplies the base desired edge length. If the internal edges of the
  substitute graph have length factors less than 1 it should hold the internal
  vertices in place.

  One problem with that is that rules can be recursively applied and length
  factors are absolute. So if a subdividing rule is applied twice the same
  problem will reappear.

  This can be combatted by calculating the mean length factor of the matched
  part of the host graph.

  If the edge is not marked as 'subdivided' the length factor is 1.

  When adding substitute edges we have the following properties:
  - Mapped. The vertices of the substitute edge are both mapped and an edge
    exists between them in the pattern. Such edges use the length factor of the
    host edge it replaces.
  - Subdivided edge. The susbstitute edge is marked as subdivided and has a
    length factor specified. This has to be multiplied by the mean length
    factor.
 
  NOTE: implemented a first pass of this, seems to work reasonably well but it
        goes wrong if there's too much subdivision going on. As a rule of thumb
        it starts to break down after three subdivisions.

- The circle relaxing pass can make vertices that aren't connected intersect.
  It might be worth adding cosmetic edges between all unconnected nodes to stop
  this happening but we'd need to somehow define an edge length between them.

  NOTE: this doesn't seem to work at all. The extra edges just pull everthing
        into a ball.

  NOTE: I added the circle radii to the repulsion stage of the graph drawing,
        seems to work most of the time.


- Different rulesets need to be able to have different tuning paramters and
  constraints.

- So there's an issue with the relax stage of the force drawing. It leaves
  vertices spaced too far out.

  Managed to control is a bit better by changing relax parameters.



Metarules or Rules for applying Rules
=====================================

While it is possible to use clever tag assignments and features like negated
tags to control the application of rules this is not always the most direct
way. For example consider a rule that be recursively applied:

  a - a    a - a - a
  |   | => |   |   |
  a - a    a - a - a

If by random chance this rule was applied a lot it would create a long sequence
of quads. You could limit it by using a set of rules, e.g.

  a - a    b - b - b
  |   | => |   |   |
  a - a    b - b - b

  a - a    b - b - b - b
  |   | => |   |   |   |
  a - a    b - b - b - b

  a - a    b - b - b - b - b
  |   | => |   |   |   |   |
  a - a    b - b - b - b - b

The above would only crate between 2 and four quads. However it seems a lot
simpler to just say that the original rule cannot be applied more than twice.

Ideas
-----

- Max uses: pretty easy to implement and understand.
  <IMPLEMENTED>

- Min uses: far more problematic than max uses because you can't guarantee that
  all min uses will be possible beforehand. Also certain prior rule choices may
  stop underused rule from being used.

  It may be possible to do a prepass on the ruleset to detect this but it feels
  like a nasty problem that may be intractable or very inefficient.

- Don't repeat: not the same as a max use of 1, it means don't use the rule
  twice in a row. Easy to understand what it does but it might be hard to
  understand the implications.

- Combined max usage: A max usage for a set of rules. Pretty easy to implement
  and understand but not totally sure on how useful it would be.

- Priorities: after all rules have been checked for other constraints use the
  higest priority. Pretty simple to implement and understand but again I'm not
  sure how useful it would be.

- Passes: sets of rules to be applied in certain orders. This would be
  equivalent to passing the result of a graph build into another grammar as a
  starting point. Slightly tricky to implement but easy enough to understand.

Constraint Propagation Solvers (CPS) and Graph Generation
---------------------------------------------------------

So I have a basic CPS and am eager to use it. How could it be used in the
various stages of the current level generation algorithm?

The various phases it could be inserted into are:

- Before rule application: It could be used to choose which rule to apply.
  - Would this require all possible graphs to be generated?
  - What kind of constraints would be useful?
    - Limiting the number of vertices.
    - Limiting the valence of vertices.
    - Limiting dead-ends. Defined as either vertices with a valence of 1 or
      given a set of sources and sinks the vertices not on direct paths
      between the sources and sinks.
    - Controlling the number of paths through a level.
    - Limiting the length chains of rooms. A chain being a maximal subgraph
      where each vertex has only two neighbours.

- Room assignment phase: the first part of 'relaxing'. It could be used to do
  the following:
  - Decide room size and roomgen algorithm.
  - Decide terrain and surround parameters for rooms.
  - Could turn non-cosmetic edges or rooms into cosmetic edges or rooms as long
    as connectivity was mainted.
  - It could remove rooms entirely, connectivity permitting.

- Decoration phase: Not yet implemented phase where items, monsters and other
  objects are added to the level. Other examples would be:
  - Entrances and exits.
  - Keys and doors.

There a general issue with applying constraints during graph construction. As
an example you could have a constraint that is violated but subsequent rule
applications would fix like adding dead-ends that a rule ends up connecting
together.


Terrain and Fringes
===================

The current setup is:

- There is a special terrain type for the borders of the level
- The theme defines terrain, surround and corridor terrain.
- The theme's surround is used to set the terrain type of the cells created by
  the enclosing code.
- Rooms can have their own terrain and surround defined.
- A fringe is the set of non-room and non-corridor cells bordering a room
  selected by a breadth first search to a fixed depth.
- Where fringes overlap the cell is given to the closest room. Cells that are
  equally close to rooms are assigned to just one rooms fringe.

While the above is quite simple I'm not getting the results I'd really like.

A fixed fringe depth is obviously not ideal. There are also examples I'd like
to implement that require more than a single surround type, e.g. hut floor
surrounded by hit walls with a fringe of dirt finally surrounded by trees.

One would also expect that certain terrain types would interact in certain
ways, e.g. Two different types of trees would dither into each other, lava
should errode certain terrain types next to it. Also fringes should be


I wonder if the fringes could be defined entirely on terrain types?

So a terrain type could have a set of fringes associated with it and a
terrain interaction matrix could define how they interact.

Fringe Types
------------

- Solid: based on depth limited multi-source distance map.
- Organic: grows out from an area in a connected manner like grass or trees.
- Tendrils: like orgranic but with distinct probe like prominences.
- Stippled: like a castle wall that has occaisional gaps.

fringes = {
    { 'solid', depth = 1, terrain = hut_wall },
    { 'solid', depth = 1, terrain = dirt },
    { 'organic', mindepth=1, maxdepth=5, growth = 0.5, terrain = tree },
}

Inside and Outside
------------------

Consider a castle, it has a wall and bit of grass outside the wall then a moat.
If the moat appeared inside the castle as well that would be quite bizarre so
we do somehow need to define the idea of inside and outside.

The general level generation procedure creates the following sets of cells:
- Rooms and corridors. These form the 'skeleton' of a level and cannot be
  assigned to a fringe.
- Each level has an AABB generated and a one cell thick, rectangular 'border'
  is created to delimit the level. They cannot be assigned to fringes.
- An enclosing procedure is invoked on the skeleton and the border to fill in
  any unoccupied space. These cells are 'filler' and can be assigned to
  fringes. It is worth noting that rooms are not guaranteed to totally occupy
  their bounds so filler cells can be placed inside them. Also roomgen
  functions are allowed to emit filler calls themselves.

If we form connected sets of filler cells (islands) they can be categorised as
follows:

- Room-interior: islands of filler cells totally surrounded by cells created by
  roomgen functions or even created by roomgen functions themselves.
- Skeleton interior: islands surrounded by rooms and corridors but no border
  cells.
- Skeleton exterior: islands that have border cells and skeleton cells on their
  exterior.

There is a problem with this though. If you consider two castles connected in a
level the above categories only work if they are connected by a single
corridor. If there are two or more connections that enclose an area the above
would consider it as one big castle.

It's probably fair to assume that these subgraphs should be disjoint, i.e. not
share any edges or vertices.

There needs to be someway of having the inside and outside take into account
subgraphs. A few issues then present themselves:

- Should all vertices be classified into subgraphs? It makes sense that edges
  between subgraphs might not be part of either subgraph.
- How to define the subgraphs?
  - Based on sets of vertex tags: So you could say tags a, b and c form a
    subgraph and the system could try and make maximal subgraphs from those
    tags. Would mean you'd have to be careful with tags which could lead to an
    increase in the number of rules.
  - Terrain definitions: So rooms with the same terrain definitions are
    collected into maximal subgraphs. Seems a bit too specific for example a
    castle could easily have different terrain types for the floors of its
    rooms.
  - Fringe definitions: If fringe defs are made into a pseudo-DB like terrains
    are and become a cell/vertex property maximal subgraphs could be made
    based on them.
- We need to be able to define the inside and outside of subgraphs.
  - The inside should only be classified as such if entirely bounded by rooms
    and edges in the subgraph.
- Should the 'global' concept of inside and outside still be usable?

